How did viewing a diff between two versions of a file help you see the bug that
was introduced?

Seeing a FC of the two versions isolated the lines that were not the same.
Once isolated, it was relatively easy to see the differences.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

Seeing the entire history of a file would be very beneficial. 
The earliest one would give the starting point and why the file was created.
Each revision could be reviewed for the purpose of the revision.
When a revision created a bug, it would be easier to identify the error.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

The pro of choosing when to create a commit is that it can be logical.  
It shows the changes for a purpose.
The con is that a logical purpose may be large and need to be broken into pieces.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

The logical purpose is different.  Google Docs works on documents that are usually not related.
Git works on files that make up a project and the files are related.  Each file has a purpose
in the project.  

How can you use the commands git log and git diff to view the history of files?

The command git log shows each commit with a logical description or reason for the change.
Git diff shows the lines changed between two commits.

How might using version control make you more confident to make changes that
could break something?

With version control, I can be more confident in making changes because I can go back to a 
previously working copy and run a diff.  With the diff, it could be easier to fix any problems.

Now that you have your workspace set up, what do you want to try using Git for?

I plan on using Git for the rest of this course and my programming projects.

